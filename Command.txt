Start
ip link
sudo cat /sys/class/dmi/id/product_uuid 
nc 127.0.0.1 6443 -v
cat /etc/fstab

#CHeck ip forwording
cat /proc/sys/net/ipv4/ip_forward
# Enable IP Forwarding Permanently
sudo nano /etc/sysctl.conf
   net.ipv4.ip_forward=1
sudo sysctl -p

Check if br_netfilter is loaded
lsmod | grep br_netfilter

Manually Load br_netfilter
sudo modprobe br_netfilter

Verify it is loaded:
lsmod | grep br_netfilter
If it loads successfully, the output should show something like:
br_netfilter           28672  0


 Ensure /proc/sys/net/bridge/bridge-nf-call-iptables Exists
 ls -l /proc/sys/net/bridge/

Enable Kernel Parameters
echo 1 | sudo tee /proc/sys/net/bridge/bridge-nf-call-iptables
echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward
To make it persistent across reboots, create a sysctl config:
cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
EOF

Apply the changes:
sudo sysctl --system

Ensure br_netfilter Loads on Boot
echo "br_netfilter" | sudo tee /etc/modules-load.d/k8s.conf
sudo systemctl restart systemd-modules-load.service




sudo apt update && sudo apt upgrade -y
# Option1: to install container run time as containerd
sudo apt install -y containerd

#Option2: to install container run time as containerd
# Add Docker GPG key and repository
sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /etc/apt/keyrings/docker.asc > /dev/null
echo "deb [signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
# Update package list and install containerd
sudo apt update
sudo apt install -y containerd.io

# Configure Containerd
sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml > /dev/null
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
sudo systemctl restart containerd
sudo systemctl enable containerd
sudo systemctl status containerd
containerd --version

# cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
# br_netfilter
# EOF

# cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
# net.bridge.bridge-nf-call-ip6tables = 1
# net.bridge.bridge-nf-call-iptables = 1
# EOF

sudo sysctl --system
sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl



curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-cache madison kubeadm
sudo apt-get install -y kubelet=1.31.0-1.1 kubeadm=1.31.0-1.1 kubectl=1.31.0-1.1
sudo apt-mark hold kubelet kubeadm kubectl

ip a
#Update enp0s3 accordingly
IP_ADDR=$(ip addr show enp0s3 | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
echo $IP_ADDR
kubeadm init --apiserver-cert-extra-sans=master-1 --apiserver-advertise-address $IP_ADDR --pod-network-cidr=10.244.0.0/16
sudo kubeadm init --apiserver-cert-extra-sans=master-1 --apiserver-advertise-address $IP_ADDR --pod-network-cidr=10.244.0.0/16

kubeadm token create --print-join-command



sudo kubeadm init --apiserver-cert-extra-sans=master-1 --apiserver-advertise-address $IP_ADDR --pod-network-cidr=10.244.0.0/16
kubectl get node
mkdir -p $HOME/.kube
kubectl get node
history

curl -LO https://raw.githubusercontent.com/flannel-io/flannel/v0.20.2/Documentation/kube-flannel.yml

  args:
  - --ip-masq
  - --kube-subnet-mgr
